# Define the port where the API gateway server would be running
server:
  port: 8765

# The OAuth2 server definition that would be used to send the authorization requests to
authserver:
    hostname: 172.19.0.121
    port: 8899
    contextPath: userauth

# Define the routes which determine what URL are serviced by what applications.
# The application/services are defined in the bootstrap.yml file of individual applications
# using the spring.application.name property.

# Note that we don't proxy the calls to the authorization server. The reason being that
# Spring cloud security would need to secure the api gateway before it can route the
# requests using zuul
apiServerPrefix: /v1

zuul:
  ignoredServices: '*'  # routes에 정의되지 않은 모든 요청은 무시 함
  sensitive-headers:    # header의 모든 정보를 bypass 함
  routes:
    user:
      path: /v1/auth/**
      stripPrefix: false
      url: http://172.19.0.121:8899/
    api-server:
      path: /v1/**
      stripPrefix: false
      url: http://172.19.0.131:8099/
# Define the Eureka server that handles service registration
eureka:
  client:
    serviceUrl:
      defaultZone: http://172.19.0.101:8761/eureka/

# Define settings for Single-Sign-On with OAuth2; this means that we need to relay the OAuth token
# to the subsequent resources that are proxied by the Zuul api gateway.

# The home definition tells us to allow anonymous access (secure: false) to the static resources that
# are accessed through the Zuul proxy.

# Remaining properties are used by the OAuth2 SSO to determine where the authorization server is and
# what client crendentials to use to access that server.
spring:
  oauth2:
    sso:
      home:
        secure: false
        path: /,/**/*.html
    client:
      accessTokenUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/token
      userAuthorizationUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/authorize
      clientId: client
      clientSecret: secret
# The userInfoUri is used to authenticate the user so that SSO token can be relayed forward. It needs to either be
# a physical endpoint (defined using userInfoUri) OR can be bypassed if you use a JSON web token (JWT) that stores
# information about grants and authentication in the token itself.

# Note that the "/user" endpoint needs to provide the principle of the logged in user (/me endpoint)
    resource:
      userInfoUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/me
      preferTokenInfo: false
jwt:
  secret: aaaaaaaaaaaaaaaaabbbbbbbbbbbbbcc # 32글자 이상의 비밀 키